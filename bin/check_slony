#!/usr/bin/env ruby

require 'rubygems'
require 'pg'
require 'optparse'
require 'timeout'

pgoptions=''
pgtty=''
@result=''
@problems = 0 
@event   = 10
@lagtime = 20
@timeout = 10

OptionParser.new do |opt|

  opt.on("-H","--host=DBHOSTNAME", String, "Specify the DBHOSTNAME"){|h| @hostname = h }
  opt.on("-P","--port=PORTNUMBER", Integer, "Specify the DB port number"){|p| @port = p }
  opt.on("-u","--username=DBUSER", String, "Specify the DB user name"){|u| @user = u }
  opt.on("-d","--dbname=DBNAME", String, "Specify the DB  name"){|d| @dbname = d }
  opt.on("-p","--password=PASSWORD", String, "Specify the DB password"){|p| @password = p }
  opt.on("-C","--cluster=CLUSTERNAME", String, "Specify the DB CLUSTER NAME"){|c| @cluster = c }
  opt.on("-e","--events=EVENTS", Integer, "Specify the Event Counts"){|e| @event = e }
  opt.on("-l","--lagtime=LAGTIME", Integer, "Specify the LAGTIME"){|l| @lagtime = l }
  opt.on("-t","--timeout=TIMEOUT", Integer, "Specify the TIMEOUT"){|t| @timeout = t }
  opt.on("-c","--countall", "All Tables count check(must be against master node)"){ @countall = true }
  opt.on("-v","--verbose", "verbose output(when specify the '-c')"){ @verbose = true }
  
  begin
    opt.parse!(ARGV)
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts opt.help
  end
end

def countcheck_all_tables(options, tty)
  result_hash = {}
  result_hash["status"] = "OK"
  error_str = ""
  con = PGconn.new(@hostname, @port, options, tty, @dbname, @user, @password)
  # 
  query = 'SELECT tab_relname from "_' + @cluster + '".sl_table'
  res = con.exec(query)

  sl_table = []
  res.each do |r|
    sl_table << r["tab_relname"]
  end
  # 
  query = 'SELECT distinct pa_server, pa_conninfo from "_' + @cluster + '".sl_path order by pa_server'
  res = con.exec(query)
  @pg_hash = {}
  res.each do |r|
    info_hash = {}
    r["pa_conninfo"].split(" ").each do |info|
      info_hash[info.split("=")[0]] = info.split("=")[1] 
    end
    @pg_hash[r["pa_server"]] = info_hash
  end
  con.close

  @master = @pg_hash.delete("1")
  # save master node data
  con = PGconn.new(@master["host"], @master["port"], options, tty, @master["dbname"], @master["user"], @master["password"])
  sl_table.each do |t|
    query = 'SELECT count(*) as cnt from ' + t 
    res = con.exec(query)
    @master[t] = res[0]["cnt"]
  end
  con.close

  # save slave node data
  @pg_hash.each {|node, info|
    con = PGconn.new(info["host"], info["port"], options, tty, info["dbname"], info["user"], info["password"])
    sl_table.each do |t|
      query = 'SELECT count(*) as cnt from ' + t 
      res = con.exec(query)
      info[t] = [res[0]["cnt"], false]
      if @master[t] != info[t][0]
        info[t][1] = true
        result_hash["status"] = "NG"
        error_str += " node #{node} #{t} "
      end
    end
    con.close
  }
  result_hash["error"] = error_str

  # only '-v'
  if @verbose
    fmt_str = '| %10s'
    cols = fmt_str *  @pg_hash.count
    state = '| %2s'
    fmt = "%-35s | %10s" + cols + state + "\n"
    @val_ary = ["tablename", "master"]
    @pg_hash.each{ |node,val|
      @val_ary << node
    }
    @val_ary << "status"
    puts fmt % @val_ary 
    puts '-' * ((@pg_hash.count * 15) + 60)
    sl_table.each do |t|
      temp_array = [t, @master[t]]
      state = "OK"
      @pg_hash.each{ |k,v|
        temp_array << v[t][0]
        state = "NG" if v[t][1] 
      }
      temp_array << state
      puts fmt % temp_array 
    end
  end

  return result_hash
end


begin
  timeout(@timeout){
    # sleep 3 # for debug
    title = "POSTGRES_"
    if @countall
      title += "COUNTCHECK "
      state = countcheck_all_tables(pgoptions, pgtty)
      if state["status"] == "OK"
        @result = "NO DIFFERENCE"
      else
        @result = "DIFFERENCE OCCURED ON " + state["error"]
        @problems += 1
      end
    else
      title += "REPLICATION_LAG "
      con = PGconn.new(@hostname, @port, pgoptions, pgtty, @dbname, @user, @password) 
      query = 'SELECT st_origin, st_received, st_lag_num_events, round(extract(epoch from st_lag_time)) from "_' + @cluster + '".sl_status'

      res = con.exec(query)
      unless res
        print "#{title} CRITICAL: Cannot prepare $DBI::errstr\n";
        exit 2
      end

      res.each do |r|

        node = r["st_received"]
        master = r["st_origin"]
        lag = r["st_lag_num_events"]
        round = r["round"]

        @result += "SUBSCRIBER " + node  + " ON ORIGIN " + master + " : EVENT LAG=" +  lag
        if (lag.to_i > 0) && (@event < lag.to_i)
          @result = @result + " (BEHIND " + (lag.to_i - @event).to_s + ") ";
          @problems += 1
        end
        @result = @result + " TIME LAG=" + round + "s";
        
        if (@lagtime > 0) && (@lagtime < round.to_i)
          @result = @result + " (BEHIND " + (round.to_i - @lagtime).to_s + "s) ";
          @problems += 1
        end
        @result = @result + " || ";

      end
    end

    if @problems > 0
      @result = title + "CRITICAL: " + @result + "\n"
      print @result
      exit 2
    else 
      @result = title + "OK: " + @result + "\n"
      print @result
      exit 0
    end
    
    print $problems;
    con.close
  }
  
rescue Timeout::Error => ex
  print "POSTGRES_REPLICATION_LAG TIMEOUT: #{ex.message}";
  exit 3
rescue => ex
  print "POSTGRES_REPLICATION_LAG UNKNOWN: #{ex.message}";
  exit 3
end



